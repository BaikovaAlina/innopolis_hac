import tkinter as tk
from tkinter import messagebox

# Настройки игры
NUM_CELLS = 50  # Количество клеток
CELL_SIZE = 60  # Увеличил размер клетки
PLAYER_SIZE = 20  # Размер фишки игрока
PLAYER_COLORS = ["red", "blue", "green", "yellow", "purple", "orange", "pink", "brown", "gray"]  # Цвета игроков

class Game:
    """Класс для отдельной игры."""
    def __init__(self, canvas, game_id):
        self.canvas = canvas
        self.game_id = game_id  # Уникальный ID игры
        self.cells = []
        self.players = []
        self.current_player = 0
        self.create_board()
        self.create_players()

    def create_board(self):
        """Создание игрового поля в виде змейки."""
        for i in range(NUM_CELLS):
            row = i // 10  # Определяем строку
            col = i % 10   # Определяем столбец

            # Если строка нечетная, идем справа налево
            if row % 2 != 0:
                col = 9 - col

            # Увеличиваем расстояние между овалами
            x1 = col * (CELL_SIZE + 10) + 50  # Смещение для центрирования и увеличение расстояния
            y1 = row * (CELL_SIZE + 10) + 50  # Смещение для центрирования и увеличение расстояния
            x2 = x1 + CELL_SIZE
            y2 = y1 + CELL_SIZE

            # Рисуем круглую клетку
            cell = self.canvas.create_oval(x1, y1, x2, y2, fill="lightgreen", outline="black")
            self.cells.append(cell)
            self.canvas.create_text((x1 + x2) // 2, (y1 + y2) // 2, text=str(i + 1))

    def create_players(self):
        """Создание игроков для этой игры."""
        num_players = 2  # Количество игроков в каждой игре
        self.players = [
            {"id": i + 1, "position": 0, "color": PLAYER_COLORS[(self.game_id * num_players + i) % len(PLAYER_COLORS)]}
            for i in range(num_players)
        ]
        self.draw_players()

    def draw_players(self):
        """Отрисовка фишек игроков."""
        for player in self.players:
            cell_coords = self.canvas.coords(self.cells[player["position"]])
            x1 = cell_coords[0] + (CELL_SIZE - PLAYER_SIZE) // 2
            y1 = cell_coords[1] + (CELL_SIZE - PLAYER_SIZE) // 2
            x2 = x1 + PLAYER_SIZE
            y2 = y1 + PLAYER_SIZE
            if "token" in player:
                self.canvas.coords(player["token"], x1, y1, x2, y2)
            else:
                player["token"] = self.canvas.create_oval(x1, y1, x2, y2, fill=player["color"])

    def make_move(self, steps):
        """Обработка хода."""
        player = self.players[self.current_player]
        new_position = player["position"] + steps

        if new_position >= NUM_CELLS:
            new_position = NUM_CELLS - 1  # Не выходим за пределы поля

        player["position"] = new_position
        self.draw_players()

        if new_position >= NUM_CELLS - 1:
            messagebox.showinfo("Победа!", f"Игрок {player['id']} победил в игре {self.game_id + 1}!")
            return True  # Игра завершена

        self.current_player = (self.current_player + 1) % len(self.players)
        return False  # Игра продолжается

class WalkGame:
    def __init__(self, root):
        self.root = root
        self.root.title("Игра-ходилка")
        self.root.geometry("800x600")  # Устанавливаем размер окна 800x600
        self.canvas = tk.Canvas(root, width=800, height=500)  # Холст для игрового поля
        self.canvas.pack()

        # Список игр (по одной на вкладку)
        self.games = []
        self.current_game = None

        # Управление
        self.label = tk.Label(root, text="Выберите вкладку для начала игры!")
        self.label.pack()

        self.entry = tk.Entry(root)
        self.entry.pack()

        self.button = tk.Button(root, text="Бросить кубик", command=self.make_move)
        self.button.pack()

        # Вкладки снизу
        self.create_tabs()

        # Автоматически создаем первую игру
        self.switch_game(0)

    def create_tabs(self):
        """Создание 9 вкладок снизу."""
        tab_frame = tk.Frame(self.root)
        tab_frame.pack(side=tk.BOTTOM, fill=tk.X)

        for i in range(9):
            tab = tk.Button(tab_frame, text=f"Игра {i + 1}", width=10, height=2, command=lambda i=i: self.switch_game(i))
            tab.pack(side=tk.LEFT, padx=5, pady=5)

    def switch_game(self, game_id):
        """Переключение на другую игру."""
        if self.current_game is not None:
            self.clear_canvas()  # Очищаем холст перед переключением

        # Создаем новую игру, если она еще не создана
        if game_id >= len(self.games):
            game = Game(self.canvas, game_id)
            self.games.append(game)
        else:
            game = self.games[game_id]

        self.current_game = game
        self.label.config(text=f"Игра {game_id + 1}, ход игрока {game.players[game.current_player]['id']}")

    def clear_canvas(self):
        """Очистка холста."""
        self.canvas.delete("all")

    def make_move(self):
        """Обработка хода в текущей игре."""
        if self.current_game is None:
            messagebox.showerror("Ошибка", "Сначала выберите игру!")
            return

        try:
            steps = int(self.entry.get())
            if steps < 1 or steps > 6:
                messagebox.showerror("Ошибка", "Введите число от 1 до 6!")
                return
        except ValueError:
            messagebox.showerror("Ошибка", "Введите корректное число!")
            return

        game_over = self.current_game.make_move(steps)
        if not game_over:
            self.label.config(text=f"Игра {self.games.index(self.current_game) + 1}, ход игрока {self.current_game.players[self.current_game.current_player]['id']}")
        self.entry.delete(0, tk.END)

# Запуск игры
if __name__ == "__main__":
    root = tk.Tk()
    game = WalkGame(root)
    root.mainloop()
